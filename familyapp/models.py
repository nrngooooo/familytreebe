from neomodel import StructuredNode, StructuredRel, StringProperty, DateProperty, IntegerProperty, RelationshipTo, RelationshipFrom, UniqueIdProperty, DateTimeProperty

# -- MARRIAGE RELATIONSHIP --
class MarriageRel(StructuredRel):
    date = DateProperty()  # Marriage date

# -- CLAN --
class UrgiinOvog(StructuredNode):
    uid = UniqueIdProperty()
    urgiinovog = StringProperty(required=True)  # Clan name (e.g., –ë–æ—Ä–∂–∏–≥–æ–Ω, –ß–æ–Ω–æ—Å)
    def get_element_id(self):
        return self.element_id

# -- GENERATIO --
class Uye(StructuredNode):
    uid = UniqueIdProperty()
    uyname = StringProperty(required=True)
    level = IntegerProperty(required=True)
    # Relationships
    persons = RelationshipFrom('Person', '–•–ê–†–™–Ø–ê–õ–ê–ì–î–ê–ù–ê')
    def get_element_id(self):
        return self.element_id

# -- PLACE --
class Place(StructuredNode):
    uid = UniqueIdProperty()
    name = StringProperty()
    country = StringProperty()
    def get_element_id(self):
        return self.element_id

# -- PERSON --
class Person(StructuredNode):
    uid = UniqueIdProperty()
    lastname = StringProperty()
    name = StringProperty(required=True)
    gender = StringProperty(choices={"–≠—Ä": "–≠—Ä", "–≠–º": "–≠–º"}, default="–≠—Ä")
    birthdate = DateProperty(required=True)
    diedate = DateProperty(default=None)
    image_url = StringProperty()
    biography = StringProperty()  # Instead of –Ω–∞–º—Ç–∞—Ä
    createdate = DateTimeProperty(default_now=True)
    modifydate = DateTimeProperty(default_now=True)
     # üî∏ Explicit Family Relationships
    father = RelationshipTo('Person', '–≠–¶–≠–ì')       # Father
    mother = RelationshipTo('Person', '–≠–•')         # Mother
    children = RelationshipTo('Person', '–•“Æ“Æ–•–≠–î')   # Children

    brothers = RelationshipTo('Person', '–ê–•')       # Brother
    sisters = RelationshipTo('Person', '–≠–ì–ß')        # Sister
    youngsiblings = RelationshipTo('Person', '–î“Æ“Æ')       # Children

    grandfather = RelationshipTo('Person', '”®–í”®”®')   # Grandfather
    grandmother = RelationshipTo('Person', '–≠–ú–≠–≠')   # Grandmother

    # Spouse (one-to-one or many-to-one with optional marriage date)
    spouse = RelationshipTo('Person', '–ì–≠–† –ë“Æ–õ', model=MarriageRel)

    # Birthplace
    born_in = RelationshipTo('Place', '–¢”®–†–°”®–ù')

    # Generation (“Æ–µ) and Clan (–£—Ä–≥–∏–π–Ω –æ–≤–æ–≥)
    generation = RelationshipTo('Uye', '–•–ê–ú–ê–ê–†–ù–ê')
    urgiinovog = RelationshipTo('UrgiinOvog', '–•–ê–†–¨–Ø–õ–ê–ì–î–î–ê–ì')

    # Audit info
    created_by = RelationshipFrom('User', '–ë“Æ–†–¢–ì–≠–°–≠–ù')
    modified_by = RelationshipFrom('User', '–ó–ê–°–í–ê–†–õ–ê–°–ê–ù')
    def get_element_id(self):
        return self.element_id

# -- USER --
class User(StructuredNode):
    
    uid = UniqueIdProperty()  
    username = StringProperty(required=True)
    email = StringProperty(required=True)
    password = StringProperty(required=True)
    token = StringProperty()
    # Relationships
    created_people = RelationshipTo('Person', '–ë“Æ–†–¢–ì–≠–°–≠–ù')  # Users can create multiple people
    family_trees = RelationshipTo('UserFamilyTree', 'HAS_FAMILY_TREE')  # User can have one or more family trees
    @property
    def is_authenticated(self):
        return True
    def get_element_id(self):
        return self.element_id 

# -- USER FAMILY TREE --
class UserFamilyTree(StructuredNode):
    uid = UniqueIdProperty()
    root_person = RelationshipTo('Person', 'MANAGES', cardinality=1)
    user = RelationshipFrom('User', 'HAS_FAMILY_TREE', cardinality=1)
    name = StringProperty()
    description = StringProperty()
    def get_element_id(self):
        return self.element_id
